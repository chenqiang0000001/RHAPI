{"uid":"93f4195379d42a72","name":"创建派工单","fullName":"TestCase.integration_tests.test_mainprocess.TestMainProcess#test_30_create_dispatch_order","historyId":"e0553c7d3f4ca63eade992d7a021b0bc","time":{"start":1751855164952,"stop":1751855165534,"duration":582},"description":"创建生产派工单，期望创建成功","descriptionHtml":"<p>创建生产派工单，期望创建成功</p>\n","status":"failed","statusMessage":"AssertionError: assert False == True","statusTrace":"self = <TestCase.integration_tests.test_mainprocess.TestMainProcess object at 0x0000026366B09FD0>\n\n    @allure.title(\"创建派工单\")\n    @allure.description(\"创建生产派工单，期望创建成功\")\n    def test_30_create_dispatch_order(self):\n        \"\"\"创建派工单\"\"\"\n        self.logger.info(\"===== 开始创建派工单 =====\")\n        assert TestMainProcess.production_plan_code, \"缺少生产计划单号\"\n    \n        with allure.step(\"查询工序任务单详情\"):\n            # 先查询工序任务单详情，获取工艺路线分录号\n            self.logger.info(\"[前置] 查询工序任务单（派工用）\")\n            task_query_body = {\n                \"ProductionPlanCode\": TestMainProcess.production_plan_code,\n                \"ProcessTaskCode\": \"\",\n                \"ProductCode\": None,\n                \"ProductName\": \"\",\n                \"ProcessRoutingCode\": None,\n                \"ProcessCode\": None,\n                \"ProcessName\": \"\",\n                \"IsPaged\": True,\n                \"PageSize\": 10,\n                \"PageIndex\": 1,\n                \"CompanyCode\": fm.CompanyCode,\n                \"FactoryCode\": \"00000.00001\"\n            }\n            task_query_resp = self.PS.getCanDispatchProcessTaskOrderDatas(task_query_body)\n            assert task_query_resp is not None, \"getCanDispatchProcessTaskOrderDatas接口返回None\"\n            assert task_query_resp.status_code == 200\n            task_data = task_query_resp.json()\n>           assert task_data['Success'] == True\nE           assert False == True\n\nTestCase\\integration_tests\\test_mainprocess.py:739: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup_and_teardown","time":{"start":1751855052350,"stop":1751855136224,"duration":83874},"status":"passed","steps":[{"name":"前置条件：清理测试数据残留","time":{"start":1751855052350,"stop":1751855110202,"duration":57852},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"attachmentStep":false,"stepsCount":0,"hasContent":false}],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"attachmentStep":false,"stepsCount":1,"hasContent":true}],"testStage":{"description":"创建生产派工单，期望创建成功","status":"failed","statusMessage":"AssertionError: assert False == True","statusTrace":"self = <TestCase.integration_tests.test_mainprocess.TestMainProcess object at 0x0000026366B09FD0>\n\n    @allure.title(\"创建派工单\")\n    @allure.description(\"创建生产派工单，期望创建成功\")\n    def test_30_create_dispatch_order(self):\n        \"\"\"创建派工单\"\"\"\n        self.logger.info(\"===== 开始创建派工单 =====\")\n        assert TestMainProcess.production_plan_code, \"缺少生产计划单号\"\n    \n        with allure.step(\"查询工序任务单详情\"):\n            # 先查询工序任务单详情，获取工艺路线分录号\n            self.logger.info(\"[前置] 查询工序任务单（派工用）\")\n            task_query_body = {\n                \"ProductionPlanCode\": TestMainProcess.production_plan_code,\n                \"ProcessTaskCode\": \"\",\n                \"ProductCode\": None,\n                \"ProductName\": \"\",\n                \"ProcessRoutingCode\": None,\n                \"ProcessCode\": None,\n                \"ProcessName\": \"\",\n                \"IsPaged\": True,\n                \"PageSize\": 10,\n                \"PageIndex\": 1,\n                \"CompanyCode\": fm.CompanyCode,\n                \"FactoryCode\": \"00000.00001\"\n            }\n            task_query_resp = self.PS.getCanDispatchProcessTaskOrderDatas(task_query_body)\n            assert task_query_resp is not None, \"getCanDispatchProcessTaskOrderDatas接口返回None\"\n            assert task_query_resp.status_code == 200\n            task_data = task_query_resp.json()\n>           assert task_data['Success'] == True\nE           assert False == True\n\nTestCase\\integration_tests\\test_mainprocess.py:739: AssertionError","steps":[{"name":"查询工序任务单详情","time":{"start":1751855164953,"stop":1751855165533,"duration":580},"status":"failed","statusMessage":"AssertionError: assert False == True\n","statusTrace":"  File \"D:\\apiAutomationRH\\TestCase\\integration_tests\\test_mainprocess.py\", line 739, in test_30_create_dispatch_order\n    assert task_data['Success'] == True\n","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":true,"attachmentStep":false,"stepsCount":0,"hasContent":true}],"attachments":[{"uid":"3d0a6a8a4fc0d197","name":"log","source":"3d0a6a8a4fc0d197.txt","type":"text/plain","size":712},{"uid":"b02ee4536c7b6b0e","name":"stderr","source":"b02ee4536c7b6b0e.txt","type":"text/plain","size":755}],"parameters":[],"attachmentsCount":2,"shouldDisplayMessage":true,"attachmentStep":false,"stepsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"feature","value":"主流程集成测试"},{"name":"parentSuite","value":"TestCase.integration_tests"},{"name":"suite","value":"test_mainprocess"},{"name":"subSuite","value":"TestMainProcess"},{"name":"host","value":"DESKTOP-520CACV"},{"name":"thread","value":"15080-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"TestCase.integration_tests.test_mainprocess"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"93f4195379d42a72.json","parameterValues":[]}
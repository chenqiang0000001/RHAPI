{"uid":"38bdd153f338342d","name":"查询工序","fullName":"TestCase.integration_tests.test_mainprocess.TestMainProcess#test_07_inquire_about_process","historyId":"15f245cd100d59ad9e29e420859c0fa0","time":{"start":1751855150330,"stop":1751855154321,"duration":3991},"description":"查询工序，提取工序ID","descriptionHtml":"<p>查询工序，提取工序ID</p>\n","status":"failed","statusMessage":"AssertionError: 期望Success=True，实际为False\nassert False == True","statusTrace":"self = <TestCase.integration_tests.test_mainprocess.TestMainProcess object at 0x0000026366AF7390>\n\n    @allure.title(\"查询工序\")\n    @allure.description(\"查询工序，提取工序ID\")\n    def test_07_inquire_about_process(self):\n        with allure.step(\"调用接口查询工序\"):\n            response = self.process_related.GetProcessInfoAutoQueryDatas()\n        try:\n            assert response is not None, \"GetProcessInfoAutoQueryDatas接口返回None，请检查接口或依赖服务是否正常\"\n            assert response.status_code == 200, f\"期望状态码200，实际为{response.status_code}\"\n            response_body = response.json()\n            assert response_body['Success'] == True, f\"期望Success=True，实际为{response_body['Success']}\"\n            if response_body.get('Attach') and len(response_body['Attach']) > 0:\n                TestMainProcess.process_id = response_body['Attach'][0]['Id']\n                TestMainProcess.IsFirstInspect = response_body['Attach'][0].get('IsFirstInspect')\n        except AssertionError as e:\n            self.logger.error(f\"查询工序失败：{e}\")\n>           raise e\n\nTestCase\\integration_tests\\test_mainprocess.py:206: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <TestCase.integration_tests.test_mainprocess.TestMainProcess object at 0x0000026366AF7390>\n\n    @allure.title(\"查询工序\")\n    @allure.description(\"查询工序，提取工序ID\")\n    def test_07_inquire_about_process(self):\n        with allure.step(\"调用接口查询工序\"):\n            response = self.process_related.GetProcessInfoAutoQueryDatas()\n        try:\n            assert response is not None, \"GetProcessInfoAutoQueryDatas接口返回None，请检查接口或依赖服务是否正常\"\n            assert response.status_code == 200, f\"期望状态码200，实际为{response.status_code}\"\n            response_body = response.json()\n>           assert response_body['Success'] == True, f\"期望Success=True，实际为{response_body['Success']}\"\nE           AssertionError: 期望Success=True，实际为False\nE           assert False == True\n\nTestCase\\integration_tests\\test_mainprocess.py:200: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup_and_teardown","time":{"start":1751855052350,"stop":1751855136224,"duration":83874},"status":"passed","steps":[{"name":"前置条件：清理测试数据残留","time":{"start":1751855052350,"stop":1751855110202,"duration":57852},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"attachmentStep":false,"stepsCount":0,"hasContent":false}],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"attachmentStep":false,"stepsCount":1,"hasContent":true}],"testStage":{"description":"查询工序，提取工序ID","status":"failed","statusMessage":"AssertionError: 期望Success=True，实际为False\nassert False == True","statusTrace":"self = <TestCase.integration_tests.test_mainprocess.TestMainProcess object at 0x0000026366AF7390>\n\n    @allure.title(\"查询工序\")\n    @allure.description(\"查询工序，提取工序ID\")\n    def test_07_inquire_about_process(self):\n        with allure.step(\"调用接口查询工序\"):\n            response = self.process_related.GetProcessInfoAutoQueryDatas()\n        try:\n            assert response is not None, \"GetProcessInfoAutoQueryDatas接口返回None，请检查接口或依赖服务是否正常\"\n            assert response.status_code == 200, f\"期望状态码200，实际为{response.status_code}\"\n            response_body = response.json()\n            assert response_body['Success'] == True, f\"期望Success=True，实际为{response_body['Success']}\"\n            if response_body.get('Attach') and len(response_body['Attach']) > 0:\n                TestMainProcess.process_id = response_body['Attach'][0]['Id']\n                TestMainProcess.IsFirstInspect = response_body['Attach'][0].get('IsFirstInspect')\n        except AssertionError as e:\n            self.logger.error(f\"查询工序失败：{e}\")\n>           raise e\n\nTestCase\\integration_tests\\test_mainprocess.py:206: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <TestCase.integration_tests.test_mainprocess.TestMainProcess object at 0x0000026366AF7390>\n\n    @allure.title(\"查询工序\")\n    @allure.description(\"查询工序，提取工序ID\")\n    def test_07_inquire_about_process(self):\n        with allure.step(\"调用接口查询工序\"):\n            response = self.process_related.GetProcessInfoAutoQueryDatas()\n        try:\n            assert response is not None, \"GetProcessInfoAutoQueryDatas接口返回None，请检查接口或依赖服务是否正常\"\n            assert response.status_code == 200, f\"期望状态码200，实际为{response.status_code}\"\n            response_body = response.json()\n>           assert response_body['Success'] == True, f\"期望Success=True，实际为{response_body['Success']}\"\nE           AssertionError: 期望Success=True，实际为False\nE           assert False == True\n\nTestCase\\integration_tests\\test_mainprocess.py:200: AssertionError","steps":[{"name":"调用接口查询工序","time":{"start":1751855150330,"stop":1751855154319,"duration":3989},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"attachmentStep":false,"stepsCount":0,"hasContent":false}],"attachments":[{"uid":"d8f01a9aeb2c7cdd","name":"log","source":"d8f01a9aeb2c7cdd.txt","type":"text/plain","size":128},{"uid":"a0f19d07ff1d880c","name":"stderr","source":"a0f19d07ff1d880c.txt","type":"text/plain","size":142}],"parameters":[],"attachmentsCount":2,"shouldDisplayMessage":true,"attachmentStep":false,"stepsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"feature","value":"主流程集成测试"},{"name":"parentSuite","value":"TestCase.integration_tests"},{"name":"suite","value":"test_mainprocess"},{"name":"subSuite","value":"TestMainProcess"},{"name":"host","value":"DESKTOP-520CACV"},{"name":"thread","value":"15080-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"TestCase.integration_tests.test_mainprocess"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"38bdd153f338342d.json","parameterValues":[]}
{"uid":"16c4bc856d42cab","name":"创建重复产线","fullName":"TestCase.functional_tests.test_factory_modeling.test_plant_layout.TestPlantLayout#test_storeOrganizationStructureData_productionline02","historyId":"38646f12b405d830330d512b8a71c032","time":{"start":1751353602607,"stop":1751353611125,"duration":8518},"description":"使用重复的产线信息创建产线，创建失败","descriptionHtml":"<p>使用重复的产线信息创建产线，创建失败</p>\n","status":"failed","statusMessage":"AssertionError: assert '数据保存成功' in ['不能在具有唯一索引\"OrganizationStructureCode\"的对象\"dbo.FactoryLayout_OrganizationStructure\"中插入重复键的行。重复键值为 (Automation01)。\\r\\n语句已终止。', '产线编码不能重复', '已有重复数据录入!']","statusTrace":"self = <TestCase.functional_tests.test_factory_modeling.test_plant_layout.TestPlantLayout object at 0x0000019CF640C390>\n\n    @pytest.mark.run(order=5)\n    @grade_3\n    @allure.title(\"创建重复产线\")\n    @allure.description(\"使用重复的产线信息创建产线，创建失败\")\n    def test_storeOrganizationStructureData_productionline02(self):\n        with allure.step(\"是否能重复创建产线\"):\n            res = FactoryModel().storeOrganizationStructureData_productionline(OrganizationStructureCode2=self.OrganizationStructureCode)\n            resBody = res.json()\n        logger.info(f\"本用例正在执行：test_storeOrganizationStructureData_productionline02。获取到的结果是：{resBody['Message']}\")\n        assert res.status_code == 200\n>       assert resBody['Message'] in [\"不能在具有唯一索引\\\"OrganizationStructureCode\\\"的对象\\\"dbo.FactoryLayout_OrganizationStructure\\\"中插入重复键的行。重复键值为 (Automation01)。\\r\\n语句已终止。\", \"产线编码不能重复\", \"已有重复数据录入!\"]\nE       assert '数据保存成功' in ['不能在具有唯一索引\"OrganizationStructureCode\"的对象\"dbo.FactoryLayout_OrganizationStructure\"中插入重复键的行。重复键值为 (Automation01)。\\r\\n语句已终止。', '产线编码不能重复', '已有重复数据录入!']\n\nTestCase\\functional_tests\\test_factory_modeling\\test_plant_layout.py:87: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_xunit_setup_class_fixture_TestPlantLayout","time":{"start":1751353539285,"stop":1751353602606,"duration":63321},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false,"hasContent":false}],"testStage":{"description":"使用重复的产线信息创建产线，创建失败","status":"failed","statusMessage":"AssertionError: assert '数据保存成功' in ['不能在具有唯一索引\"OrganizationStructureCode\"的对象\"dbo.FactoryLayout_OrganizationStructure\"中插入重复键的行。重复键值为 (Automation01)。\\r\\n语句已终止。', '产线编码不能重复', '已有重复数据录入!']","statusTrace":"self = <TestCase.functional_tests.test_factory_modeling.test_plant_layout.TestPlantLayout object at 0x0000019CF640C390>\n\n    @pytest.mark.run(order=5)\n    @grade_3\n    @allure.title(\"创建重复产线\")\n    @allure.description(\"使用重复的产线信息创建产线，创建失败\")\n    def test_storeOrganizationStructureData_productionline02(self):\n        with allure.step(\"是否能重复创建产线\"):\n            res = FactoryModel().storeOrganizationStructureData_productionline(OrganizationStructureCode2=self.OrganizationStructureCode)\n            resBody = res.json()\n        logger.info(f\"本用例正在执行：test_storeOrganizationStructureData_productionline02。获取到的结果是：{resBody['Message']}\")\n        assert res.status_code == 200\n>       assert resBody['Message'] in [\"不能在具有唯一索引\\\"OrganizationStructureCode\\\"的对象\\\"dbo.FactoryLayout_OrganizationStructure\\\"中插入重复键的行。重复键值为 (Automation01)。\\r\\n语句已终止。\", \"产线编码不能重复\", \"已有重复数据录入!\"]\nE       assert '数据保存成功' in ['不能在具有唯一索引\"OrganizationStructureCode\"的对象\"dbo.FactoryLayout_OrganizationStructure\"中插入重复键的行。重复键值为 (Automation01)。\\r\\n语句已终止。', '产线编码不能重复', '已有重复数据录入!']\n\nTestCase\\functional_tests\\test_factory_modeling\\test_plant_layout.py:87: AssertionError","steps":[{"name":"是否能重复创建产线","time":{"start":1751353602608,"stop":1751353611124,"duration":8516},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false,"hasContent":false}],"attachments":[{"uid":"9e6692f3ac48e641","name":"log","source":"9e6692f3ac48e641.txt","type":"text/plain","size":1549},{"uid":"b05fda89ff068e16","name":"stderr","source":"b05fda89ff068e16.txt","type":"text/plain","size":18566}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":2,"stepsCount":1,"attachmentStep":false,"hasContent":true},"afterStages":[{"name":"_xunit_setup_class_fixture_TestPlantLayout::0","time":{"start":1751353611137,"stop":1751353611137,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false,"hasContent":false}],"labels":[{"name":"feature","value":"车间布局相关模块"},{"name":"tag","value":"grade_3"},{"name":"tag","value":"run(order=5)"},{"name":"parentSuite","value":"TestCase.functional_tests.test_factory_modeling"},{"name":"suite","value":"test_plant_layout"},{"name":"subSuite","value":"TestPlantLayout"},{"name":"host","value":"DESKTOP-520CACV"},{"name":"thread","value":"8020-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"TestCase.functional_tests.test_factory_modeling.test_plant_layout"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":["run(order=5)","grade_3"]},"source":"16c4bc856d42cab.json","parameterValues":[]}
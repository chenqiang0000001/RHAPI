{"uid":"33866b15afa60dd1","name":"产品绑定工艺路线","fullName":"TestCase.functional_tests.test_factory_modeling.test_process_related.TestProcessRelated#test_storeBatchProductProcessRouteDatas01","historyId":"5175c9ef6ca3ffd914d516e73d019c98","time":{"start":1751353369067,"stop":1751353375874,"duration":6807},"description":"产品绑定工艺路线，绑定成功","descriptionHtml":"<p>产品绑定工艺路线，绑定成功</p>\n","status":"failed","statusMessage":"AssertionError: assert '工序变更成功！' == '数据保存成功'\n  \n  - 数据保存成功\n  + 工序变更成功！","statusTrace":"self = <TestCase.functional_tests.test_factory_modeling.test_process_related.TestProcessRelated object at 0x0000019CF6464850>\n\n    @pytest.mark.run(order=1)  # 执行顺序\n    @grade_1  # 优先级\n    @allure.title(\"产品绑定工艺路线\")  # 在allure报告中自定义测试用例标题\n    @allure.description(\"产品绑定工艺路线，绑定成功\")  # 报告中测试用例的详细描述\n    def test_storeBatchProductProcessRouteDatas01(self):\n        with allure.step(\"产品是否成功绑定工艺路线\"):  # 在报告中记录测试用例中的测试步骤或详细信息\n            res = ProcessRelated().storeProcessInfoData()  # 创建工序\n            res = ProcessRelated().storeProcessRoutingData() # 新增工艺路线\n            res = ProcessRelated().adjustProcessRoutingEntry() # 工艺路线绑定工序\n            res = ProcessRelated().adjustProcessRoutingEntry() # 产品绑定工艺路线\n            resBody = res.json()  # 响应数据转化JSON\n        logger.info(f\"本用例正在执行：test_adjustProcessRoutingEntry01。获取到的结果是：{resBody['Message']}, 期望的结果是: 数据保存成功\")  # 日志记录结果\n        try:\n            assert res.status_code == 200  # 断言响应状态码为200\n            assert resBody['Message'] ==  \"数据保存成功\"  # 断言数据更新成功\n        except AssertionError as e:\n            logger.error(\"产品绑定工艺路线接口：test_adjustProcessRoutingEntry01 断言失败，展开结果与预期不符\")  # 错误日志记录\n>           raise e\n\nTestCase\\functional_tests\\test_factory_modeling\\test_process_related.py:147: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <TestCase.functional_tests.test_factory_modeling.test_process_related.TestProcessRelated object at 0x0000019CF6464850>\n\n    @pytest.mark.run(order=1)  # 执行顺序\n    @grade_1  # 优先级\n    @allure.title(\"产品绑定工艺路线\")  # 在allure报告中自定义测试用例标题\n    @allure.description(\"产品绑定工艺路线，绑定成功\")  # 报告中测试用例的详细描述\n    def test_storeBatchProductProcessRouteDatas01(self):\n        with allure.step(\"产品是否成功绑定工艺路线\"):  # 在报告中记录测试用例中的测试步骤或详细信息\n            res = ProcessRelated().storeProcessInfoData()  # 创建工序\n            res = ProcessRelated().storeProcessRoutingData() # 新增工艺路线\n            res = ProcessRelated().adjustProcessRoutingEntry() # 工艺路线绑定工序\n            res = ProcessRelated().adjustProcessRoutingEntry() # 产品绑定工艺路线\n            resBody = res.json()  # 响应数据转化JSON\n        logger.info(f\"本用例正在执行：test_adjustProcessRoutingEntry01。获取到的结果是：{resBody['Message']}, 期望的结果是: 数据保存成功\")  # 日志记录结果\n        try:\n            assert res.status_code == 200  # 断言响应状态码为200\n>           assert resBody['Message'] ==  \"数据保存成功\"  # 断言数据更新成功\nE           AssertionError: assert '工序变更成功！' == '数据保存成功'\nE             \nE             - 数据保存成功\nE             + 工序变更成功！\n\nTestCase\\functional_tests\\test_factory_modeling\\test_process_related.py:144: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_xunit_setup_class_fixture_TestProcessRelated","time":{"start":1751353364777,"stop":1751353364777,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false,"hasContent":false}],"testStage":{"description":"产品绑定工艺路线，绑定成功","status":"failed","statusMessage":"AssertionError: assert '工序变更成功！' == '数据保存成功'\n  \n  - 数据保存成功\n  + 工序变更成功！","statusTrace":"self = <TestCase.functional_tests.test_factory_modeling.test_process_related.TestProcessRelated object at 0x0000019CF6464850>\n\n    @pytest.mark.run(order=1)  # 执行顺序\n    @grade_1  # 优先级\n    @allure.title(\"产品绑定工艺路线\")  # 在allure报告中自定义测试用例标题\n    @allure.description(\"产品绑定工艺路线，绑定成功\")  # 报告中测试用例的详细描述\n    def test_storeBatchProductProcessRouteDatas01(self):\n        with allure.step(\"产品是否成功绑定工艺路线\"):  # 在报告中记录测试用例中的测试步骤或详细信息\n            res = ProcessRelated().storeProcessInfoData()  # 创建工序\n            res = ProcessRelated().storeProcessRoutingData() # 新增工艺路线\n            res = ProcessRelated().adjustProcessRoutingEntry() # 工艺路线绑定工序\n            res = ProcessRelated().adjustProcessRoutingEntry() # 产品绑定工艺路线\n            resBody = res.json()  # 响应数据转化JSON\n        logger.info(f\"本用例正在执行：test_adjustProcessRoutingEntry01。获取到的结果是：{resBody['Message']}, 期望的结果是: 数据保存成功\")  # 日志记录结果\n        try:\n            assert res.status_code == 200  # 断言响应状态码为200\n            assert resBody['Message'] ==  \"数据保存成功\"  # 断言数据更新成功\n        except AssertionError as e:\n            logger.error(\"产品绑定工艺路线接口：test_adjustProcessRoutingEntry01 断言失败，展开结果与预期不符\")  # 错误日志记录\n>           raise e\n\nTestCase\\functional_tests\\test_factory_modeling\\test_process_related.py:147: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <TestCase.functional_tests.test_factory_modeling.test_process_related.TestProcessRelated object at 0x0000019CF6464850>\n\n    @pytest.mark.run(order=1)  # 执行顺序\n    @grade_1  # 优先级\n    @allure.title(\"产品绑定工艺路线\")  # 在allure报告中自定义测试用例标题\n    @allure.description(\"产品绑定工艺路线，绑定成功\")  # 报告中测试用例的详细描述\n    def test_storeBatchProductProcessRouteDatas01(self):\n        with allure.step(\"产品是否成功绑定工艺路线\"):  # 在报告中记录测试用例中的测试步骤或详细信息\n            res = ProcessRelated().storeProcessInfoData()  # 创建工序\n            res = ProcessRelated().storeProcessRoutingData() # 新增工艺路线\n            res = ProcessRelated().adjustProcessRoutingEntry() # 工艺路线绑定工序\n            res = ProcessRelated().adjustProcessRoutingEntry() # 产品绑定工艺路线\n            resBody = res.json()  # 响应数据转化JSON\n        logger.info(f\"本用例正在执行：test_adjustProcessRoutingEntry01。获取到的结果是：{resBody['Message']}, 期望的结果是: 数据保存成功\")  # 日志记录结果\n        try:\n            assert res.status_code == 200  # 断言响应状态码为200\n>           assert resBody['Message'] ==  \"数据保存成功\"  # 断言数据更新成功\nE           AssertionError: assert '工序变更成功！' == '数据保存成功'\nE             \nE             - 数据保存成功\nE             + 工序变更成功！\n\nTestCase\\functional_tests\\test_factory_modeling\\test_process_related.py:144: AssertionError","steps":[{"name":"产品是否成功绑定工艺路线","time":{"start":1751353369068,"stop":1751353375870,"duration":6802},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false,"hasContent":false}],"attachments":[{"uid":"661f1508e90efa5b","name":"log","source":"661f1508e90efa5b.txt","type":"text/plain","size":365},{"uid":"a3b95ccc2f2ffbcb","name":"stderr","source":"a3b95ccc2f2ffbcb.txt","type":"text/plain","size":389}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":2,"stepsCount":1,"attachmentStep":false,"hasContent":true},"afterStages":[{"name":"_xunit_setup_class_fixture_TestProcessRelated::0","time":{"start":1751353377852,"stop":1751353377852,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false,"hasContent":false}],"labels":[{"name":"feature","value":"工序相关模块"},{"name":"tag","value":"grade_1"},{"name":"tag","value":"run(order=1)"},{"name":"parentSuite","value":"TestCase.functional_tests.test_factory_modeling"},{"name":"suite","value":"test_process_related"},{"name":"subSuite","value":"TestProcessRelated"},{"name":"host","value":"DESKTOP-520CACV"},{"name":"thread","value":"8020-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"TestCase.functional_tests.test_factory_modeling.test_process_related"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":["run(order=1)","grade_1"]},"source":"33866b15afa60dd1.json","parameterValues":[]}
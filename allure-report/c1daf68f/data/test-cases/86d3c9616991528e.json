{"uid":"86d3c9616991528e","name":"工艺路线绑定工序","fullName":"TestCase.functional_tests.test_factory_modeling.test_process_related.TestProcessRelated#test_adjustProcessRoutingEntry01","historyId":"9fd767f19cd4cd7db92e98ecdf0f442f","time":{"start":1748512563095,"stop":1748512564658,"duration":1563},"description":"工艺路线绑定工序，绑定成功","descriptionHtml":"<p>工艺路线绑定工序，绑定成功</p>\n","status":"failed","statusMessage":"AssertionError: assert '数据保存成功' == '数据新增成功'\n  \n  - 数据新增成功\n  + 数据保存成功","statusTrace":"self = <TestCase.functional_tests.test_factory_modeling.test_process_related.TestProcessRelated object at 0x00000276477A6B10>\n\n    @pytest.mark.run(order=1)  # 执行顺序\n    @grade_1  # 优先级\n    @allure.title(\"工艺路线绑定工序\")  # 在allure报告中自定义测试用例标题\n    @allure.description(\"工艺路线绑定工序，绑定成功\")  # 报告中测试用例的详细描述\n    def test_adjustProcessRoutingEntry01(self):\n        with allure.step(\"工艺路线是否成功绑定工序\"):  # 在报告中记录测试用例中的测试步骤或详细信息\n            res = ProcessRelated().adjustProcessRoutingEntry() # 实例登录接口\n            resBody = res.json()  # 响应数据转化JSON\n        logger.info(f\"本用例正在执行：test_adjustProcessRoutingEntry01。获取到的结果是：{resBody['Message']}, 期望的结果是: 数据新增成功\")  # 日志记录结果\n        try:\n            assert res.status_code == 200  # 断言响应状态码为200\n            assert resBody['Message'] ==  \"数据新增成功\"  # 断言数据更新成功\n        except AssertionError as e:\n            logger.error(\"物料信息维护页面：test_adjustProcessRoutingEntry01 断言失败，展开结果与预期不符\")  # 错误日志记录\n>           raise e\n\nTestCase\\functional_tests\\test_factory_modeling\\test_process_related.py:128: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <TestCase.functional_tests.test_factory_modeling.test_process_related.TestProcessRelated object at 0x00000276477A6B10>\n\n    @pytest.mark.run(order=1)  # 执行顺序\n    @grade_1  # 优先级\n    @allure.title(\"工艺路线绑定工序\")  # 在allure报告中自定义测试用例标题\n    @allure.description(\"工艺路线绑定工序，绑定成功\")  # 报告中测试用例的详细描述\n    def test_adjustProcessRoutingEntry01(self):\n        with allure.step(\"工艺路线是否成功绑定工序\"):  # 在报告中记录测试用例中的测试步骤或详细信息\n            res = ProcessRelated().adjustProcessRoutingEntry() # 实例登录接口\n            resBody = res.json()  # 响应数据转化JSON\n        logger.info(f\"本用例正在执行：test_adjustProcessRoutingEntry01。获取到的结果是：{resBody['Message']}, 期望的结果是: 数据新增成功\")  # 日志记录结果\n        try:\n            assert res.status_code == 200  # 断言响应状态码为200\n>           assert resBody['Message'] ==  \"数据新增成功\"  # 断言数据更新成功\nE           AssertionError: assert '数据保存成功' == '数据新增成功'\nE             \nE             - 数据新增成功\nE             + 数据保存成功\n\nTestCase\\functional_tests\\test_factory_modeling\\test_process_related.py:125: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"工艺路线绑定工序，绑定成功","status":"failed","statusMessage":"AssertionError: assert '数据保存成功' == '数据新增成功'\n  \n  - 数据新增成功\n  + 数据保存成功","statusTrace":"self = <TestCase.functional_tests.test_factory_modeling.test_process_related.TestProcessRelated object at 0x00000276477A6B10>\n\n    @pytest.mark.run(order=1)  # 执行顺序\n    @grade_1  # 优先级\n    @allure.title(\"工艺路线绑定工序\")  # 在allure报告中自定义测试用例标题\n    @allure.description(\"工艺路线绑定工序，绑定成功\")  # 报告中测试用例的详细描述\n    def test_adjustProcessRoutingEntry01(self):\n        with allure.step(\"工艺路线是否成功绑定工序\"):  # 在报告中记录测试用例中的测试步骤或详细信息\n            res = ProcessRelated().adjustProcessRoutingEntry() # 实例登录接口\n            resBody = res.json()  # 响应数据转化JSON\n        logger.info(f\"本用例正在执行：test_adjustProcessRoutingEntry01。获取到的结果是：{resBody['Message']}, 期望的结果是: 数据新增成功\")  # 日志记录结果\n        try:\n            assert res.status_code == 200  # 断言响应状态码为200\n            assert resBody['Message'] ==  \"数据新增成功\"  # 断言数据更新成功\n        except AssertionError as e:\n            logger.error(\"物料信息维护页面：test_adjustProcessRoutingEntry01 断言失败，展开结果与预期不符\")  # 错误日志记录\n>           raise e\n\nTestCase\\functional_tests\\test_factory_modeling\\test_process_related.py:128: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <TestCase.functional_tests.test_factory_modeling.test_process_related.TestProcessRelated object at 0x00000276477A6B10>\n\n    @pytest.mark.run(order=1)  # 执行顺序\n    @grade_1  # 优先级\n    @allure.title(\"工艺路线绑定工序\")  # 在allure报告中自定义测试用例标题\n    @allure.description(\"工艺路线绑定工序，绑定成功\")  # 报告中测试用例的详细描述\n    def test_adjustProcessRoutingEntry01(self):\n        with allure.step(\"工艺路线是否成功绑定工序\"):  # 在报告中记录测试用例中的测试步骤或详细信息\n            res = ProcessRelated().adjustProcessRoutingEntry() # 实例登录接口\n            resBody = res.json()  # 响应数据转化JSON\n        logger.info(f\"本用例正在执行：test_adjustProcessRoutingEntry01。获取到的结果是：{resBody['Message']}, 期望的结果是: 数据新增成功\")  # 日志记录结果\n        try:\n            assert res.status_code == 200  # 断言响应状态码为200\n>           assert resBody['Message'] ==  \"数据新增成功\"  # 断言数据更新成功\nE           AssertionError: assert '数据保存成功' == '数据新增成功'\nE             \nE             - 数据新增成功\nE             + 数据保存成功\n\nTestCase\\functional_tests\\test_factory_modeling\\test_process_related.py:125: AssertionError","steps":[{"name":"工艺路线是否成功绑定工序","time":{"start":1748512563095,"stop":1748512564654,"duration":1559},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false}],"attachments":[{"uid":"1d7f46c22630db18","name":"log","source":"1d7f46c22630db18.txt","type":"text/plain","size":356},{"uid":"158f2cbdc4225f5a","name":"stderr","source":"158f2cbdc4225f5a.txt","type":"text/plain","size":380}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":2,"hasContent":true,"stepsCount":1,"attachmentStep":false},"afterStages":[],"labels":[{"name":"feature","value":"工序相关模块"},{"name":"tag","value":"grade_1"},{"name":"tag","value":"run(order=1)"},{"name":"parentSuite","value":"TestCase.functional_tests.test_factory_modeling"},{"name":"suite","value":"test_process_related"},{"name":"subSuite","value":"TestProcessRelated"},{"name":"host","value":"DESKTOP-520CACV"},{"name":"thread","value":"3812-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"TestCase.functional_tests.test_factory_modeling.test_process_related"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":["run(order=1)","grade_1"]},"source":"86d3c9616991528e.json","parameterValues":[]}
{"uid":"65e04e16acdf8b48","name":"开始生产","fullName":"TestCase.integration_tests.test_mainprocess.TestMainProcess#test_33_start_production","historyId":"810c948cdf062ca51a6d8bd98de0bf8c","time":{"start":1752114646765,"stop":1752114646855,"duration":90},"description":"开始生产作业，期望启动成功","descriptionHtml":"<p>开始生产作业，期望启动成功</p>\n","status":"failed","statusMessage":"AssertionError: assert False == True","statusTrace":"self = <TestCase.integration_tests.test_mainprocess.TestMainProcess object at 0x000001F35E6E50D0>\n\n    @allure.title(\"开始生产\")\n    @allure.description(\"开始生产作业，期望启动成功\")\n    def test_33_start_production(self):\n        \"\"\"开始生产\"\"\"\n        self.logger.info(\"===== 开始生产 =====\")\n        assert TestMainProcess.dispatch_code and TestMainProcess.production_plan_code and TestMainProcess.process_task_code, \"缺少必要参数\"\n    \n        with allure.step(\"查询派工单详情\"):\n            # 先查询派工单详情，确保状态正确\n            dispatch_query_body = {\n                \"ProductionDispatchCode\": TestMainProcess.dispatch_code,\n                \"BindProductionDispatchCode\": \"\",\n                \"ProcessTaskCode\": TestMainProcess.process_task_code,\n                \"ProductionPlanCode\": TestMainProcess.production_plan_code,\n                \"ProcessCode\": None,\n                \"ProcessName\": \"\",\n                \"EquipmentCode\": None,\n                \"EquipmentName\": \"\",\n                \"MouldCode\": None,\n                \"MouldName\": \"\",\n                \"ProductCode\": None,\n                \"ProductName\": \"\",\n                \"IsPaged\": True,\n                \"PageSize\": 10,\n                \"PageIndex\": 1,\n                \"CompanyCode\": fm.CompanyCode,\n                \"FactoryCode\": \"00000.00001\"\n            }\n            dispatch_query_resp = self.PS.getProductionDispatchOrderAutoQueryDatas(dispatch_query_body)\n            assert dispatch_query_resp is not None, \"getProductionDispatchOrderAutoQueryDatas接口返回None\"\n            assert dispatch_query_resp.status_code == 200\n            data = dispatch_query_resp.json()\n            assert data['Success'] == True\n    \n            attach = data.get('Attach')\n            assert attach and isinstance(attach, list) and len(attach) > 0, \"未获取到派工单详情\"\n    \n            d = attach[0]\n            self.logger.info(f\"派工单状态: {d.get('OrderStatus')}\")\n            self.logger.info(f\"派工单控制状态: {d.get('ControlStatus')}\")\n    \n            # 获取派工单详情字段\n            process_code = d.get('ProcessCode')\n            process_name = d.get('ProcessName')\n            process_seq = d.get('ProcessSeq')\n            workshop_code = d.get('WorkShopInfoCode')\n            workshop_name = d.get('WorkShopInfoName')\n            production_line_code = d.get('ProductionLineCode') or TestMainProcess.production_line_id\n            production_line_name = d.get('ProductionLineName')\n            equipment_code = d.get('EquipmentCode')\n            equipment_name = d.get('EquipmentName')\n            organization_structure_code = d.get('OrganizationStructureCode')\n            organization_structure_name = d.get('OrganizationStructureName')\n    \n            # 检查关键参数是否存在\n            required_fields = {\n                'process_code': process_code,\n                'process_name': process_name,\n                'process_seq': process_seq,\n                'workshop_code': workshop_code,\n                'equipment_code': equipment_code\n            }\n            missing_fields = [k for k, v in required_fields.items() if not v]\n            assert not missing_fields, f\"派工单详情缺少必要字段: {', '.join(missing_fields)}\"\n    \n            # 从派工单详情中提取assign_work_id\n            assign_work_id = d.get('Id')\n            assert assign_work_id, \"未获取到派工单ID\"\n    \n        with allure.step(\"启动生产\"):\n            response = self.production_workbench.startProduction(\n                dispatch_code=TestMainProcess.dispatch_code,\n                plan_code=TestMainProcess.production_plan_code,\n                process_task_code=TestMainProcess.process_task_code,\n                process_code=process_code,\n                process_name=process_name,\n                process_seq=process_seq,\n                workshop_code=workshop_code,\n                workshop_name=workshop_name,\n                production_line_code=production_line_code,\n                production_line_name=production_line_name,\n                equipment_code=equipment_code,\n                equipment_name=equipment_name,\n                organization_structure_code=organization_structure_code,\n                organization_structure_name=organization_structure_name,\n                assign_work_id=assign_work_id\n            )\n            assert response is not None, \"startProduction接口返回None\"\n            assert response.status_code == 200\n            create_response = response.json()\n>           assert create_response['Success'] == True\nE           assert False == True\n\nTestCase\\integration_tests\\test_mainprocess.py:956: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup_and_teardown","time":{"start":1752114596387,"stop":1752114641756,"duration":45369},"status":"passed","steps":[{"name":"前置条件：清理测试数据残留","time":{"start":1752114596387,"stop":1752114617554,"duration":21167},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false}],"attachments":[],"parameters":[],"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":1,"attachmentStep":false}],"testStage":{"description":"开始生产作业，期望启动成功","status":"failed","statusMessage":"AssertionError: assert False == True","statusTrace":"self = <TestCase.integration_tests.test_mainprocess.TestMainProcess object at 0x000001F35E6E50D0>\n\n    @allure.title(\"开始生产\")\n    @allure.description(\"开始生产作业，期望启动成功\")\n    def test_33_start_production(self):\n        \"\"\"开始生产\"\"\"\n        self.logger.info(\"===== 开始生产 =====\")\n        assert TestMainProcess.dispatch_code and TestMainProcess.production_plan_code and TestMainProcess.process_task_code, \"缺少必要参数\"\n    \n        with allure.step(\"查询派工单详情\"):\n            # 先查询派工单详情，确保状态正确\n            dispatch_query_body = {\n                \"ProductionDispatchCode\": TestMainProcess.dispatch_code,\n                \"BindProductionDispatchCode\": \"\",\n                \"ProcessTaskCode\": TestMainProcess.process_task_code,\n                \"ProductionPlanCode\": TestMainProcess.production_plan_code,\n                \"ProcessCode\": None,\n                \"ProcessName\": \"\",\n                \"EquipmentCode\": None,\n                \"EquipmentName\": \"\",\n                \"MouldCode\": None,\n                \"MouldName\": \"\",\n                \"ProductCode\": None,\n                \"ProductName\": \"\",\n                \"IsPaged\": True,\n                \"PageSize\": 10,\n                \"PageIndex\": 1,\n                \"CompanyCode\": fm.CompanyCode,\n                \"FactoryCode\": \"00000.00001\"\n            }\n            dispatch_query_resp = self.PS.getProductionDispatchOrderAutoQueryDatas(dispatch_query_body)\n            assert dispatch_query_resp is not None, \"getProductionDispatchOrderAutoQueryDatas接口返回None\"\n            assert dispatch_query_resp.status_code == 200\n            data = dispatch_query_resp.json()\n            assert data['Success'] == True\n    \n            attach = data.get('Attach')\n            assert attach and isinstance(attach, list) and len(attach) > 0, \"未获取到派工单详情\"\n    \n            d = attach[0]\n            self.logger.info(f\"派工单状态: {d.get('OrderStatus')}\")\n            self.logger.info(f\"派工单控制状态: {d.get('ControlStatus')}\")\n    \n            # 获取派工单详情字段\n            process_code = d.get('ProcessCode')\n            process_name = d.get('ProcessName')\n            process_seq = d.get('ProcessSeq')\n            workshop_code = d.get('WorkShopInfoCode')\n            workshop_name = d.get('WorkShopInfoName')\n            production_line_code = d.get('ProductionLineCode') or TestMainProcess.production_line_id\n            production_line_name = d.get('ProductionLineName')\n            equipment_code = d.get('EquipmentCode')\n            equipment_name = d.get('EquipmentName')\n            organization_structure_code = d.get('OrganizationStructureCode')\n            organization_structure_name = d.get('OrganizationStructureName')\n    \n            # 检查关键参数是否存在\n            required_fields = {\n                'process_code': process_code,\n                'process_name': process_name,\n                'process_seq': process_seq,\n                'workshop_code': workshop_code,\n                'equipment_code': equipment_code\n            }\n            missing_fields = [k for k, v in required_fields.items() if not v]\n            assert not missing_fields, f\"派工单详情缺少必要字段: {', '.join(missing_fields)}\"\n    \n            # 从派工单详情中提取assign_work_id\n            assign_work_id = d.get('Id')\n            assert assign_work_id, \"未获取到派工单ID\"\n    \n        with allure.step(\"启动生产\"):\n            response = self.production_workbench.startProduction(\n                dispatch_code=TestMainProcess.dispatch_code,\n                plan_code=TestMainProcess.production_plan_code,\n                process_task_code=TestMainProcess.process_task_code,\n                process_code=process_code,\n                process_name=process_name,\n                process_seq=process_seq,\n                workshop_code=workshop_code,\n                workshop_name=workshop_name,\n                production_line_code=production_line_code,\n                production_line_name=production_line_name,\n                equipment_code=equipment_code,\n                equipment_name=equipment_name,\n                organization_structure_code=organization_structure_code,\n                organization_structure_name=organization_structure_name,\n                assign_work_id=assign_work_id\n            )\n            assert response is not None, \"startProduction接口返回None\"\n            assert response.status_code == 200\n            create_response = response.json()\n>           assert create_response['Success'] == True\nE           assert False == True\n\nTestCase\\integration_tests\\test_mainprocess.py:956: AssertionError","steps":[{"name":"查询派工单详情","time":{"start":1752114646766,"stop":1752114646807,"duration":41},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false},{"name":"启动生产","time":{"start":1752114646807,"stop":1752114646849,"duration":42},"status":"failed","statusMessage":"AssertionError: assert False == True\n","statusTrace":"  File \"D:\\apiAutomationRH\\TestCase\\integration_tests\\test_mainprocess.py\", line 956, in test_33_start_production\n    assert create_response['Success'] == True\n","steps":[],"attachments":[],"parameters":[],"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false}],"attachments":[{"uid":"344e695d644b8ac","name":"log","source":"344e695d644b8ac.txt","type":"text/plain","size":3775},{"uid":"ac3109c516bd7fb2","name":"stdout","source":"ac3109c516bd7fb2.txt","type":"text/plain","size":3264},{"uid":"76c2b0f4ed69b8ca","name":"stderr","source":"76c2b0f4ed69b8ca.txt","type":"text/plain","size":3830}],"parameters":[],"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":3,"stepsCount":2,"attachmentStep":false},"afterStages":[],"labels":[{"name":"feature","value":"主流程集成测试"},{"name":"parentSuite","value":"TestCase.integration_tests"},{"name":"suite","value":"test_mainprocess"},{"name":"subSuite","value":"TestMainProcess"},{"name":"host","value":"DESKTOP-520CACV"},{"name":"thread","value":"20992-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"TestCase.integration_tests.test_mainprocess"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"65e04e16acdf8b48.json","parameterValues":[]}
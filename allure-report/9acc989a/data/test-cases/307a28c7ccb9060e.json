{"uid":"307a28c7ccb9060e","name":"新建设备","fullName":"TestCase.functional_tests.test_equipment_management.test_equipment_ledger.TestEquipmentLedger#test_storeEquipmentLedgerData01","historyId":"361aff978e6a59ec5b51f1d76ad36e68","time":{"start":1748564200577,"stop":1748564202996,"duration":2419},"description":"使用符合要求的信息新建设备，新建成功","descriptionHtml":"<p>使用符合要求的信息新建设备，新建成功</p>\n","status":"failed","statusMessage":"AssertionError: assert '已有重复数据录入!' == '数据新增成功'\n  \n  - 数据新增成功\n  + 已有重复数据录入!","statusTrace":"self = <class 'TestCase.functional_tests.test_equipment_management.test_equipment_ledger.TestEquipmentLedger'>\n\n    @classmethod\n    # def setup_class(cls):\n    #     DataCleaner().clean_related_data()\n    #\n    # @classmethod\n    #\n    # def teardown_class(cls):\n    #     DataCleaner().clean_related_data()\n    \n    @pytest.mark.run(order=1)  # 执行顺序\n    @grade_1  # 优先级\n    @allure.title(\"新建设备\")  # 在allure报告中自定义测试用例标题\n    @allure.description(\"使用符合要求的信息新建设备，新建成功\")  # 报告中测试用例的详细描述\n    def test_storeEquipmentLedgerData01(self):\n        with allure.step(\"是否成功新建设备\"):  # 在报告中记录测试用例中的测试步骤或详细信息\n            DataCleaner().delete_data(2)\n            res = EquipmentLedgerManagement().storeEquipmentLedgerData()  # 实例登录接口\n            resBody = res.json()  # 响应数据转化JSON\n        logger.info(\n            f\"本用例正在执行：test_storeEquipmentLedgerData01。获取到的结果是：{resBody['Message']}, 期望的结果是: 数据新增成功\")  # 日志记录结果\n        try:\n            assert res.status_code == 200  # 断言响应状态码为200\n            assert resBody['Message'] == \"数据新增成功\"  # 断言数据更新成功\n        except AssertionError as e:\n            logger.error(\"新建设备页面：test_storeEquipmentLedgerData01 断言失败，展开结果与预期不符\")  # 错误日志记录\n>           raise e\n\nTestCase\\functional_tests\\test_equipment_management\\test_equipment_ledger.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <class 'TestCase.functional_tests.test_equipment_management.test_equipment_ledger.TestEquipmentLedger'>\n\n    @classmethod\n    # def setup_class(cls):\n    #     DataCleaner().clean_related_data()\n    #\n    # @classmethod\n    #\n    # def teardown_class(cls):\n    #     DataCleaner().clean_related_data()\n    \n    @pytest.mark.run(order=1)  # 执行顺序\n    @grade_1  # 优先级\n    @allure.title(\"新建设备\")  # 在allure报告中自定义测试用例标题\n    @allure.description(\"使用符合要求的信息新建设备，新建成功\")  # 报告中测试用例的详细描述\n    def test_storeEquipmentLedgerData01(self):\n        with allure.step(\"是否成功新建设备\"):  # 在报告中记录测试用例中的测试步骤或详细信息\n            DataCleaner().delete_data(2)\n            res = EquipmentLedgerManagement().storeEquipmentLedgerData()  # 实例登录接口\n            resBody = res.json()  # 响应数据转化JSON\n        logger.info(\n            f\"本用例正在执行：test_storeEquipmentLedgerData01。获取到的结果是：{resBody['Message']}, 期望的结果是: 数据新增成功\")  # 日志记录结果\n        try:\n            assert res.status_code == 200  # 断言响应状态码为200\n>           assert resBody['Message'] == \"数据新增成功\"  # 断言数据更新成功\nE           AssertionError: assert '已有重复数据录入!' == '数据新增成功'\nE             \nE             - 数据新增成功\nE             + 已有重复数据录入!\n\nTestCase\\functional_tests\\test_equipment_management\\test_equipment_ledger.py:35: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"使用符合要求的信息新建设备，新建成功","status":"failed","statusMessage":"AssertionError: assert '已有重复数据录入!' == '数据新增成功'\n  \n  - 数据新增成功\n  + 已有重复数据录入!","statusTrace":"self = <class 'TestCase.functional_tests.test_equipment_management.test_equipment_ledger.TestEquipmentLedger'>\n\n    @classmethod\n    # def setup_class(cls):\n    #     DataCleaner().clean_related_data()\n    #\n    # @classmethod\n    #\n    # def teardown_class(cls):\n    #     DataCleaner().clean_related_data()\n    \n    @pytest.mark.run(order=1)  # 执行顺序\n    @grade_1  # 优先级\n    @allure.title(\"新建设备\")  # 在allure报告中自定义测试用例标题\n    @allure.description(\"使用符合要求的信息新建设备，新建成功\")  # 报告中测试用例的详细描述\n    def test_storeEquipmentLedgerData01(self):\n        with allure.step(\"是否成功新建设备\"):  # 在报告中记录测试用例中的测试步骤或详细信息\n            DataCleaner().delete_data(2)\n            res = EquipmentLedgerManagement().storeEquipmentLedgerData()  # 实例登录接口\n            resBody = res.json()  # 响应数据转化JSON\n        logger.info(\n            f\"本用例正在执行：test_storeEquipmentLedgerData01。获取到的结果是：{resBody['Message']}, 期望的结果是: 数据新增成功\")  # 日志记录结果\n        try:\n            assert res.status_code == 200  # 断言响应状态码为200\n            assert resBody['Message'] == \"数据新增成功\"  # 断言数据更新成功\n        except AssertionError as e:\n            logger.error(\"新建设备页面：test_storeEquipmentLedgerData01 断言失败，展开结果与预期不符\")  # 错误日志记录\n>           raise e\n\nTestCase\\functional_tests\\test_equipment_management\\test_equipment_ledger.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <class 'TestCase.functional_tests.test_equipment_management.test_equipment_ledger.TestEquipmentLedger'>\n\n    @classmethod\n    # def setup_class(cls):\n    #     DataCleaner().clean_related_data()\n    #\n    # @classmethod\n    #\n    # def teardown_class(cls):\n    #     DataCleaner().clean_related_data()\n    \n    @pytest.mark.run(order=1)  # 执行顺序\n    @grade_1  # 优先级\n    @allure.title(\"新建设备\")  # 在allure报告中自定义测试用例标题\n    @allure.description(\"使用符合要求的信息新建设备，新建成功\")  # 报告中测试用例的详细描述\n    def test_storeEquipmentLedgerData01(self):\n        with allure.step(\"是否成功新建设备\"):  # 在报告中记录测试用例中的测试步骤或详细信息\n            DataCleaner().delete_data(2)\n            res = EquipmentLedgerManagement().storeEquipmentLedgerData()  # 实例登录接口\n            resBody = res.json()  # 响应数据转化JSON\n        logger.info(\n            f\"本用例正在执行：test_storeEquipmentLedgerData01。获取到的结果是：{resBody['Message']}, 期望的结果是: 数据新增成功\")  # 日志记录结果\n        try:\n            assert res.status_code == 200  # 断言响应状态码为200\n>           assert resBody['Message'] == \"数据新增成功\"  # 断言数据更新成功\nE           AssertionError: assert '已有重复数据录入!' == '数据新增成功'\nE             \nE             - 数据新增成功\nE             + 已有重复数据录入!\n\nTestCase\\functional_tests\\test_equipment_management\\test_equipment_ledger.py:35: AssertionError","steps":[{"name":"是否成功新建设备","time":{"start":1748564200577,"stop":1748564202993,"duration":2416},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false}],"attachments":[{"uid":"cea0536ebc225713","name":"log","source":"cea0536ebc225713.txt","type":"text/plain","size":1480},{"uid":"d6380f0abf19caf3","name":"stderr","source":"d6380f0abf19caf3.txt","type":"text/plain","size":1524}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":2,"hasContent":true,"stepsCount":1,"attachmentStep":false},"afterStages":[],"labels":[{"name":"feature","value":"设备台账模块"},{"name":"tag","value":"grade_1"},{"name":"tag","value":"run(order=1)"},{"name":"parentSuite","value":"TestCase.functional_tests.test_equipment_management"},{"name":"suite","value":"test_equipment_ledger"},{"name":"subSuite","value":"TestEquipmentLedger"},{"name":"host","value":"DESKTOP-520CACV"},{"name":"thread","value":"22208-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"TestCase.functional_tests.test_equipment_management.test_equipment_ledger"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":["run(order=1)","grade_1"]},"source":"307a28c7ccb9060e.json","parameterValues":[]}